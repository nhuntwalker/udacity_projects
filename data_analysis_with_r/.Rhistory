data(diamonds)
names(diamonds)
load(diamonds)
names(diamonds)
data(diamonds)
names(diamonds)
data(mtcars)
data(diamonds)
load(diamonds)
install.packages(diamodns)
install.packages("diamonds")
data(diamonds)
setRepositories()
setwd("/Users/Nick/Documents/udacity/projects/data_analysis_with_r/")
library(ggplot2)
library(gridExtra)
library(GGally)
data(diamonds)
plt1 = ggplot(data = diamonds, aes(x = price)) + geom_histogram()
plt2 = ggplot(data = diamonds, aes(x = price)) + geom_histogram()
grid.arrange(plt1, plt2, ncol=2)
plt1 = ggplot(data = diamonds, aes(x = price)) + geom_histogram()
plt2 = ggplot(data = diamonds, aes(x = price)) + geom_histogram() +
scale_x_log10()
grid.arrange(plt1, plt2, ncol=2)
plt1 = ggplot(data = diamonds, aes(x = price)) + geom_histogram()
plt2 = ggplot(data = diamonds, aes(x = price)) + geom_histogram() +
scale_x_log10(breaks = c(100, 300, 1000, 3000, 10000))
grid.arrange(plt1, plt2, ncol=2)
plt1 = ggplot(data = diamonds, aes(x = price)) + geom_histogram() +
ggtitle("Price")
plt2 = ggplot(data = diamonds, aes(x = price)) + geom_histogram() +
scale_x_log10(breaks = c(100, 300, 1000, 3000, 10000)) +
ggtitle("Price (log10)")
grid.arrange(plt1, plt2, ncol=2)
plt1 = ggplot(data = diamonds, aes(x = price)) + geom_histogram() +
ggtitle("Price")
plt2 = ggplot(data = diamonds, aes(x = price)) + geom_histogram(binwidth=0.1) +
scale_x_log10(breaks = c(100, 300, 1000, 3000, 10000)) +
ggtitle("Price (log10)")
grid.arrange(plt1, plt2, ncol=2)
plt1 = ggplot(data = diamonds, aes(x = price)) + geom_histogram() +
ggtitle("Price")
plt2 = ggplot(data = diamonds, aes(x = price)) + geom_histogram(binwidth=0.01) +
scale_x_log10(breaks = c(100, 300, 1000, 3000, 10000)) +
ggtitle("Price (log10)")
grid.arrange(plt1, plt2, ncol=2)
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle("Price")
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle("Price")
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle("Price")
setwd("/Users/Nick/Documents/udacity/projects/data_analysis_with_r/")
library(ggplot2)
library(gridExtra)
library(GGally)
library(scales)
library(memisc)
data(diamonds)
install.packages("memisc")
setwd("/Users/Nick/Documents/udacity/projects/data_analysis_with_r/")
library(ggplot2)
library(gridExtra)
library(GGally)
library(scales)
library(memisc)
data(diamonds)
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle("Price")
diamonds$volume = diamonds$x * diamonds$y * diamonds$z
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
cuberoot_trans = function() trans_new("cuberoot",
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
head(sort(table(diamonds$carat), decreasing=T))
head(sort(table(diamonds$price), decreasing=T))
# head(sort(table(diamonds$carat), decreasing=T))
# head(sort(table(diamonds$price), decreasing=T))
#
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha=0.1) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# head(sort(table(diamonds$carat), decreasing=T))
# head(sort(table(diamonds$price), decreasing=T))
#
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha=0.02) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# head(sort(table(diamonds$carat), decreasing=T))
# head(sort(table(diamonds$price), decreasing=T))
#
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.02) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# head(sort(table(diamonds$carat), decreasing=T))
# head(sort(table(diamonds$price), decreasing=T))
#
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.02, aes(color=clarity)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# head(sort(table(diamonds$carat), decreasing=T))
# head(sort(table(diamonds$price), decreasing=T))
#
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.5, aes(color=clarity)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# head(sort(table(diamonds$carat), decreasing=T))
# head(sort(table(diamonds$price), decreasing=T))
#
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=clarity)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=Clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
?diamonds
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=cut)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=color)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=color)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=color)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color') +
lm(price ~ carat)
ggplot(aes(carat, price), data = diamonds) +
geom_point(position="jitter", alpha=0.2, aes(color=color)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color') +
lm(diamonds$price ~ diamonds$carat)
?I
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.packages("RCurl")
install.packages("bitops")
setwd("/Users/Nick/Documents/udacity/projects/data_analysis_with_r/")
library(ggplot2)
library(gridExtra)
library(GGally)
library(scales)
library(memisc)
library(RColorBrewer)
library(RCurl)
library(bitops)
data(diamonds)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
diamondsurl = getBinaryUrl("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
library(RCurl)
library(bitops)
diamondsurl = getBinaryUrl("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load("BigDiamonds.Rda")
names(diamondsbig)
unique(diamondsbig$cert)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=subset(diamondsbig, (cert == "GIA") & (price < 10000)))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity = "VS1")
modelEstimate = predict(m5, newdata = thisDiamond, interval="prediction",
level = 0.95)
modelEstimate
10^(modelEstimate)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity = "VS1")
modelEstimate = predict(m5, newdata = thisDiamond, interval="prediction",
level = 0.95)
exp(2)
exp(modelEstimate)
exp(modelEstimate)[1]
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity = "VS1")
modelEstimate = predict(m5, newdata = thisDiamond, interval="prediction",
level = 0.95)
actualEstimate = exp(modelEstimate)[1]
estimateSig = (exp(modelEstimate)[3] - exp(modelEstimate)[2])/2
actualEstimate
estimateSig
truth = 5601
(actualEstimate - truth) / truth
(actualEstimate - truth) / estimateSig
